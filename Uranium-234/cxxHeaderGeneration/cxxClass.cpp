#include "cxxClass.hpp"
#include <format>
#include "../Utils/Logger/Logger.hpp"

namespace Uranium
{
	void CxxClass::printMembers() const
	{
		for (const auto& member : m_members)
			Logs::Logger::Info(member.getAsCxx());
	
	}
	std::string CxxClass::makeCxxClassDef() const
	{
		std::stringstream ss;
		ss << std::format("#pragma once\n// {}.hpp Autogenerated by the Uranium Toolchain Isotope 234", m_name);
		if (this->getNamespace() != "")
			ss << std::format("\nnamespace {} {{", this->getNamespace());
		ss << std::format("\nclass {} {{\nprivate: // members", m_name);
		for (const auto& member : m_members)
			ss << std::format("\n\t{};", member.getAsCxx());
		ss << "\npublic: // methods and ctor";
		ss << "\n\t" << m_name << "(";
		std::vector<CxxType*> defaultTypes;
		defaultTypes.resize(m_members.size()); // technically a waste of memory, but i would rather that than multiple allocations
		for (const auto& member : m_members)
		{
			if (member.hasDefaultValue())
			{
				defaultTypes.push_back(const_cast<CxxType*>(&member));
				continue;
			}
			ss << member.getAsCxx() << ", "; // this will leave a trailing comma, but that's fine ill just remove it after
		}
		for (const auto& member : defaultTypes)
			ss << member->getAsCxx() << ","; 
		// remove the trailing comma
		ss.seekp(-2, std::ios_base::end); 
		ss << ") : ";
		if (this->m_parent != "")
		{
			ss << m_parent << "(";
			for (const auto& memberName : this->getMembersForParent())
				ss << memberName << ", ";
			ss.seekp(-2, std::ios_base::end);
			ss << ") {}";
		}
		else
		{
			ss << "{}";
		}
		// member functions
		ss << "\npublic: // member functions\n";


		ss << "\n};";
		if (this->getNamespace() != "")
			ss << "\n}";

		return ss.str();
	}
}